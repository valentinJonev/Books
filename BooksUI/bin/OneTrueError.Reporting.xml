<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OneTrueError.Reporting</name>
    </assembly>
    <members>
        <member name="T:OneTrueError.Reporting.Base36">
            <summary>
            Base36 generates nicer Ids than base64, but a bit longer.
            </summary>
            <remarks>
            Can be used to generate report ids which are used to identify every report that occurs.
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Base36.Encode(System.Int64)">
            <summary>
            Encode the given number into a Base36 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:OneTrueError.Reporting.Base36.Decode(System.String)">
            <summary>
            Decode the Base36 Encoded string into a number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.AssemblyProvider">
            <summary>
            Collection information about all assemblies which has been loaded. Will be put into a collection named <c>Assemblies</c>.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.IContextInfoProvider">
            <summary>
            Collects information from a specific part of the system
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.IContextInfoProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>Collection. Items with multiple values are joined using <c>";;"</c></returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.IContextInfoProvider.Name">
            <summary>
            Name of the collection that this provider adds.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.AssemblyProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.AssemblyProvider.Name">
            <summary>
            Gets "Assemblies"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.DefaultProviderAttribute">
            <summary>
            Use to indicate which providers are added into the collection process per default
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.ExceptionPropertiesProvider">
            <summary>
                Goes through the exception and maps all custom properties. Will be added into a collection called
                <c>ExceptionProperties</c>.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.ExceptionPropertiesProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.ExceptionPropertiesProvider.Name">
            <summary>
                Returns "ExceptionProperties"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.AppInfoProvider">
            <summary>
                Collects information about the currently running application.
            </summary>
            <remarks>
                <para>
                    The collection is named <c>ApplicationInfo</c> and the collected information is:
                </para>
                <list type="table">
                    <listheader>
                        <term>Property name</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>ThreadCount</term>
                        <description>Number of OS threads.</description>
                    </item>
                    <item>
                        <term>HandleCount</term>
                        <description>Amount of OS handles that your application have opened.</description>
                    </item>
                    <item>
                        <term>StartTime</term>
                        <description>When the process was started.</description>
                    </item>
                    <item>
                        <term>TotalProcessorTime</term>
                        <description>
                            Total amount used by your process (including OS time like reading from files or sending stuff
                            over a socket).
                        </description>
                    </item>
                    <item>
                        <term>UserProcessorTime</term>
                        <description>Amount of time used to execute your code.</description>
                    </item>
                    <item>
                        <term>CurrentDirectory</term>
                        <description>Current directory.</description>
                    </item>
                    <item>
                        <term>MainModule</term>
                        <description>
                            Executable used to start the process, including the module name, file name, and module memory
                            details.
                        </description>
                    </item>
                    <item>
                        <term>ProcessName</term>
                        <description>Executable file name, without path and file extension.</description>
                    </item>
                    <item>
                        <term>WorkingSet</term>
                        <description>number of bytes of physical memory mapped to the process context.</description>
                    </item>
                    <item>
                        <term>VirtualMemorySize</term>
                        <description>Current size of virtual memory used by the process.</description>
                    </item>
                    <item>
                        <term>PrivateMemorySize</term>
                        <description>
                            Current size of memory used by the process that cannot be shared with other processes (i.e.
                            dedicated memory).
                        </description>
                    </item>
                    <item>
                        <term>BasePriority</term>
                        <description>Starting priority for threads created within the associated process.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="F:OneTrueError.Reporting.ContextProviders.AppInfoProvider.NameConstant">
            <summary>
                Name of the context collection
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.AppInfoProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
                Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
                Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.AppInfoProvider.Name">
            <summary>
            Gets "ApplicationInfo"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.FileVersionProvider">
            <summary>
            File versions for all loaded assemblies (can be different than the assembly version).
            </summary>
            <remarks>
            <para>Collection name is "FileVersions"</para>
            </remarks>
        </member>
        <member name="F:OneTrueError.Reporting.ContextProviders.FileVersionProvider.NAME">
            <summary>
            "FileVersions"
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.FileVersionProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.FileVersionProvider.Name">
            <summary>
            Name of the collection that this provider adds.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.Helpers.ManagementCollector">
            <summary>
            Collector used to fetch information from the windows management API
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.Helpers.ManagementCollector.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.ContextProviders.Helpers.ManagementCollector"/> class.
            </summary>
            <param name="collection">Collection to fill with context information.</param>
            <exception cref="T:System.ArgumentNullException">collection</exception>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.Helpers.ManagementCollector.Collect(System.String)">
            <summary>
            Collects the specified name.
            </summary>
            <param name="name">Management object table.</param>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.Helpers.ManagementCollector.Filter">
            <summary>
            Filter out the specified names (if any).
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.NamespaceDoc">
            <summary>
            Context providers are used to collect additional information that can aid you in solving the error.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.ThreadContextInfo">
            <summary>
                Collects information from <c>Thread.CurrentThread</c> to a context called "Thread".
            </summary>
        </member>
        <member name="F:OneTrueError.Reporting.ContextProviders.ThreadContextInfo.NAME">
            <summary>
                "Thread"
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.ThreadContextInfo.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
                Collects information from <c>Thread.CurrentThread</c> to a context called "Thread".
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.ThreadContextInfo.Name">
            <summary>
                "Thread"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Contracts.ContextInfo">
            <summary>
            DTO for a context collection
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ContextInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ContextInfo"/> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ContextInfo.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ContextInfo"/> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <param name="items">All items in this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            name
            or
            items
            </exception>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ContextInfo.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ContextInfo"/> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <param name="items">All items in this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            name
            or
            items
            </exception>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ContextInfo.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ContextInfo"/> class.
            </summary>
            <param name="name">Collection name (will be shown in the web site).</param>
            <param name="items">All items in this collection.</param>
            <exception cref="T:System.ArgumentNullException">
            name
            or
            items
            </exception>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ContextInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ContextInfo.Name">
            <summary>
            Gets name of this collection (shown for the user so that he/she can identify this collection)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ContextInfo.Items">
            <summary>
            All items in the collection
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Contracts.ErrorReportDTO">
            <summary>
            DTO used to transfer the report from the applications to the server.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ErrorReportDTO.#ctor(System.String,OneTrueError.Reporting.Contracts.ExceptionModel,OneTrueError.Reporting.Contracts.ContextInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ErrorReportDTO"/> class.
            </summary>
            <param name="reportId">Unique identifier for this error report.</param>
            <param name="exception">The exception.</param>
            <param name="contextCollections">The context collections.</param>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ErrorReportDTO.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ErrorReportDTO"/> class.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ErrorReportDTO.Add(OneTrueError.Reporting.Contracts.ContextInfo)">
            <summary>
            Add an collection to the model
            </summary>
            <param name="collection">Collection of contextual information which can be used to aid in solving the error.</param>
            <exception cref="T:System.ArgumentNullException">collection</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ErrorReportDTO.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.CreatedAtUtc">
            <summary>
            To get exact date
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportVersion">
            <summary>
            Version of the report API
            </summary>
            <example>
            1.0
            </example>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.IncidentId">
            <summary>
            For backwards compatibility
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId">
            <summary>
            Gets report id (unique identifier used in communication with the customer to identify this error)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ContextCollections">
            <summary>
            A collection of context information such as HTTP request information or computer hardware info.
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.Exception">
            <summary>
            Exception which was caught.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Contracts.ExceptionModel">
            <summary>
                Model used to wrap all information from an exception.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ExceptionModel.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ExceptionModel"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ExceptionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Contracts.ExceptionModel"/> class.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ExceptionModel.Copy(System.Exception,OneTrueError.Reporting.Contracts.ExceptionModel)">
            <summary>
            Copy the .NET exception information into our DTO.
            </summary>
            <param name="source">Exception to copy from</param>
            <param name="destination">Model to put the information in.</param>
        </member>
        <member name="M:OneTrueError.Reporting.Contracts.ExceptionModel.GetProperties(System.Exception)">
            <summary>
            Get all properties from an exception (public and non public).
            </summary>
            <param name="exception">Exception to scan.</param>
            <returns>Properties</returns>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.FullName">
            <summary>
            Full type name (namespace + class name)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.Name">
            <summary>
            Type name
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.Namespace">
            <summary>
            Namespace that the exception is in
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.AssemblyName">
            <summary>
            Assembly name (version included)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.Message">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.StackTrace">
            <summary>
            Stack trace, line numbers included if your app also distributes the PDB files.
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.InnerException">
            <summary>
            Inner exception (if any; otherwise <c>null</c>).
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.BaseClasses">
            <summary>
                Exception base classes. Most specific first: <c>ArgumentOutOfRangeException</c>, <c>ArgumentException</c>,
                <c>Exception</c>.
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.Everything">
            <summary>
                Everything (<c>exception.ToString()</c>)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.ExceptionModel.Properties">
            <summary>
                All properties (public and private)
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Contracts.FeedbackDTO">
            <summary>
            To be able to write feedback after the actual error have been sent.
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.FeedbackDTO.ReportId">
            <summary>
            Id returned from <see cref="M:OneTrueError.Reporting.OneTrue.CreateReport(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])"/> or <see cref="M:OneTrueError.Reporting.OneTrue.Report(System.Exception)"/>
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.FeedbackDTO.EmailAddress">
            <summary>
            Email address to user (if he/she would like to get status updates)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Contracts.FeedbackDTO.Description">
            <summary>
            Description written by the user about what he/she did when the error occurred.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.IAdvancedConfiguration">
            <summary>
            Advanced configuration can be used to fine tune the behavior of the error collector or report uploading.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.IAdvancedConfiguration.AddCallback(OneTrueError.Reporting.IErrorCallback)">
            <summary>
            Invoked when a new unhandled exception has been caught.
            </summary>
            <param name="callback">callback to invoke</param>
            <remarks>Should primarily be used for logging and diagnostics</remarks>
        </member>
        <member name="E:OneTrueError.Reporting.IAdvancedConfiguration.UploadReportFailed">
            <summary>
            Fired if we fail to upload or process error reports
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.IAdvancedConfiguration.ContextProvidersRegistrar">
            <summary>
                Keeps track of all providers which are used to collect context information
            </summary>
            <seealso cref="N:OneTrueError.Reporting.ContextProviders"/>
        </member>
        <member name="T:OneTrueError.Reporting.ObjectExtensions">
            <summary>
            Extension methods for objects.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ObjectExtensions.IsAnonymousType(System.Type)">
            <summary>
            Determines whether the given type is an anonymous object.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is anonymous type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OneTrueError.Reporting.ObjectExtensions.ToContextCollection(System.Object)">
            <summary>
            Converts simple objects into context collections
            </summary>
            <param name="instance">Object to convert</param>
            <returns>Context information</returns>
            <remarks>
            Anonymous types get the collection name "CustomData" while any other class get the class name as collection name.
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.ObjectToContextCollectionConverter">
            <summary>
                Converts an object into a context collection
            </summary>
            <remarks>
            <para>Anonymous objects are added as a "CustomData" collection while all other objects are added in a collection which is named as their type name.</para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.ObjectToContextCollectionConverter.Convert(System.String,System.Object)">
            <summary>
                Turn an object into a string which can be used for debugging.
            </summary>
            <param name="instance">Object to get a string representation for</param>
            <returns>"null" if the object is null, otherwise an string as given per object sample</returns>
            <remarks>
                Look at the class doc for an example.
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.ObjectToContextCollectionConverter.Convert(System.Object)">
            <summary>
                Turn an object into a string which can be used for debugging.
            </summary>
            <param name="instance">Object to get a string representation for</param>
            <returns>"null" if the object is null, otherwise an string as given per object sample</returns>
            <remarks>
                Look at the class doc for an example.
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.ObjectToContextCollectionConverter.IsSimpleType(System.Type)">
            <summary>
                Checks if the specified type could be traversed or just added as a value.
            </summary>
            <param name="type">Type to check</param>
            <returns><c>true</c> if we should add this type as a value; <c>false</c> if we should do reflection on it.</returns>
        </member>
        <member name="M:OneTrueError.Reporting.ObjectToContextCollectionConverter.ReflectObject(System.Object,System.String,OneTrueError.Reporting.Contracts.ContextInfo,System.Collections.Generic.List{System.Object})">
            <summary>
            Use reflection on a complex object to add it's values to our context collection
            </summary>
            <param name="instance">Current object to reflect</param>
            <param name="prefix">Prefix, like "User.Address.Postal.ZipCode"</param>
            <param name="contextCollection">Collection that values should be added to.</param>
            <param name="path">To prevent circular references.</param>
        </member>
        <member name="T:OneTrueError.Reporting.OneConfiguration">
            <summary>
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.IConfigurator">
            <summary>
                Configuration settings for OneTrueError.
            </summary>
            <seealso cref="T:OneTrueError.Reporting.OneTrue"/>
        </member>
        <member name="M:OneTrueError.Reporting.IConfigurator.Credentials(System.String,System.String)">
            <summary>
                Set the credentials for onetrueerror.com
            </summary>
            <param name="appKey">Key listed under your application in onetrueerror.com</param>
            <param name="sharedSecret">Secret listed under your application in onetrueerror.com</param>
        </member>
        <member name="M:OneTrueError.Reporting.IConfigurator.AddSubmitter(OneTrueError.Reporting.Submitters.IErrorSubmitter)">
            <summary>
                Submitters are the ones that takes an error report and store it somewhere (for instance in our web service)
            </summary>
            <param name="submitter">Submitter to add.</param>
            <remarks>
                <para>
                    Our default submitter is called <see cref="T:OneTrueError.Reporting.Submitters.ReportToOneTrueError"/>. You can also configure it by using
                    <see cref="M:OneTrueError.Reporting.IConfigurator.Credentials(System.String,System.String)"/> method.
                </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.IConfigurator.AddContextProvider(OneTrueError.Reporting.ContextProviders.IContextInfoProvider)">
            <summary>
                Used to collect context information when an exception happens.
            </summary>
            <param name="contextProvider">Provider</param>
            <remarks>
                <para>
                    You can customize all providers under <see cref="P:OneTrueError.Reporting.IConfigurator.Advanced"/> configuration.
                </para>
            </remarks>
        </member>
        <member name="P:OneTrueError.Reporting.IConfigurator.AskUserForDetails">
            <summary>
                ask user about what he did and if he would like to get notified when the error has been fixed.
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.IConfigurator.AskUserForPermission">
            <summary>
                Ask user for permission to upload the error details to the web service.
            </summary>
            <remarks>
                <para>
                    <c>false</c> = upload the error report along with context information directly.
                </para>
            </remarks>
        </member>
        <member name="P:OneTrueError.Reporting.IConfigurator.AskForEmailAddress">
            <summary>
                All the user to supply the email address.
            </summary>
            <remarks>
                <para>
                    This flag toggles the option to follow incidents at onetrueerror.com, i.e. read status updates and be able to
                    leave additional feedback.
                </para>
            </remarks>
        </member>
        <member name="P:OneTrueError.Reporting.IConfigurator.Advanced">
            <summary>
                Advanced configuration
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.OneConfiguration.AddCallback(OneTrueError.Reporting.IErrorCallback)">
            <summary>
                Invoked when a new unhandled exception has been caught.
            </summary>
            <param name="callback">callback to invoke</param>
            <exception cref="T:System.ArgumentNullException">callback</exception>
            <remarks>
                Should primarily be used for logging and diagnostics
            </remarks>
        </member>
        <member name="E:OneTrueError.Reporting.OneConfiguration.UploadReportFailed">
            <summary>
                Reports all failures in the report uploading process.
            </summary>
            <example>
                <code>
            
            </code>
            </example>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.Implementations.StoredReport">
            <summary>
                A report stored on disk
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.StoredReport.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Storage.Implementations.StoredReport"/> class.
            </summary>
            <param name="baseDirectory">The base directory.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.StoredReport.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Storage.Implementations.StoredReport"/> class.
            </summary>
            <param name="fullPath">The full path.</param>
        </member>
        <member name="P:OneTrueError.Reporting.Storage.Implementations.StoredReport.StoredTimeUtc">
            <summary>
            When report was stored.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.InvalidApplicationKeyException">
            <summary>
            Thrown when the server did not find our application key
            </summary>
            <remarks>
            <para>
            You can catch this exception using the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
            </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.InvalidApplicationKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Submitters.InvalidApplicationKeyException"/> class.
            </summary>
            <param name="errMsg">The error MSG.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ISubmitterQueue.DoWork(System.Threading.WaitHandle)">
            <summary>
            Check if there are any queued work. If so, upload them.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.SubmitDirectlyQueue">
            <summary>
            Will upload errors directly instead of queuing them.
            </summary>
            <remarks>
            <para>The benefit is that errors are uploaded in parallel and that exceptions (misconfigured library)
            are reported to the developer directly. The down side is that reports are lost if something fails.</para>
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.UploadTempReports">
            <summary>
            Will try to upload all reports which we have invoked <c>CreateReport</c> on but not submitted it.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.UploadReportFailedEventArgs">
            <summary>
            Event args for UploadReportFailed
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.UploadReportFailedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.UploadReportFailedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="P:OneTrueError.Reporting.UploadReportFailedEventArgs.Exception">
            <summary>
            Exception generated by OTE (it can for instance be that you have configured the app key incorrectly).
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.DefaultSerializer">
            <summary>
            Default serializer used when reporting everything to OTE.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.DefaultSerializer.Serialize(OneTrueError.Reporting.Contracts.ErrorReportDTO,System.IO.Stream)">
            <summary>
            Serialize a report
            </summary>
            <param name="report">Report to serialize</param>
            <param name="destination">Stream to put the serialized info in</param>
            <exception cref="T:System.ArgumentNullException">
            report
            or
            destination
            </exception>
            <exception cref="T:System.ArgumentException">Stream must be writable.;destination</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.DefaultSerializer.SerializeToBuffer(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
            Serialize into a byte buffer
            </summary>
            <param name="report">Report to serialize</param>
            <returns>
            Generated buffer
            </returns>
            <exception cref="T:System.ArgumentNullException">report</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.DefaultSerializer.Deserialize(System.Byte[])">
            <summary>
            Deserialize a byte buffer containing our report.
            </summary>
            <param name="source">Buffer containing a serialized report.</param>
            <returns>
            Report
            </returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.Implementations.AppDataStorageFactory">
            <summary>
                Stores files under the <c>SpecialFolder.ApplicationData</c> directory which typically means <c><![CDATA[C:\Users\<yourName>\AppData\Roaming\OneTrueError]]></c>
            </summary>
            <remarks>
                Create the storage by invoking <c>AppDataStorageFactory.Create()</c>.
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.IDataStorageFactory">
            <summary>
            Used to open the data storage.
            </summary>
            <remarks>
            The data storage is used to store all files before everything is uploaded to the server.
            </remarks>
            <seealso cref="T:OneTrueError.Reporting.Storage.DataStorageProvider"/>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.IDataStorageFactory.Open(System.String)">
            <summary>
            Open the storage
            </summary>
            <param name="name">Name, like a folder name</param>
            <returns>Storage</returns>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.AppDataStorageFactory.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Storage.Implementations.AppDataStorageFactory"/> class.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.AppDataStorageFactory.Open(System.String)">
            <summary>
                Open the storage
            </summary>
            <param name="name">Name, like a folder name</param>
            <returns>
                Storage
            </returns>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.AppDataStorageFactory.Create">
            <summary>
                Create a new storage factory.
            </summary>
            <returns>Created factory</returns>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.Implementations.FileStorage">
            <summary>
                Stored information in the specified folder
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.IDataStorage">
            <summary>
                Used to store items before they have been sent to the server.
            </summary>
            <remarks>
                <para>
                    The storage should be considered as a file folder. I.e. you open one storage per folder that you want to store
                    items in. The actual implementation might
                    store things in a DB or a single file.
                </para>
                <para>
                    We use temp storage to be able to keep reports persistent while collecting user information and sending them to
                    our
                    service.
                </para>
                <para>
                    For instance web applications can't store the reports anywhere while getting user feedback (since two
                    different HTTP requests are made)
                </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.IDataStorage.Store(System.String,System.Byte[])">
            <summary>
                Save or update
            </summary>
            <param name="id">report id</param>
            <param name="item">Serialized item</param>
            <exception cref="T:System.ArgumentNullException">
            id
            or
            item
            </exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.IDataStorage.Load(System.String)">
            <summary>
            Get item
            </summary>
            <param name="id">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>).</param>
            <returns>
            Item
            </returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
            <exception cref="T:System.InvalidOperationException">Item do not exist.</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.IDataStorage.TryGetFirstItem(System.String@,System.Byte[]@)">
            <summary>
            Get first item
            </summary>
            <param name="id">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>).</param>
            <param name="contents">Serialized report.</param>
            <returns>
            Item if any; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.IDataStorage.TryGetFirstItem(System.DateTime,System.String@,System.Byte[]@)">
            <summary>
            Get first item
            </summary>
            <param name="olderThanThisUtc">Report must have been stored before this date (Universal Coordinate time)</param>
            <param name="id">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>).</param>
            <param name="contents">Serialized report.</param>
            <returns>
             <c>true</c> if there was an available item; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.IDataStorage.Delete(System.String)">
            <summary>
                Delete a report from the storage
            </summary>
            <param name="reportId">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>)</param>
            <exception cref="T:System.ArgumentNullException">reportId</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.FileStorage.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Storage.Implementations.FileStorage"/> class.
            </summary>
            <param name="directoryName">Absolute path to a directory where our reports should be stored..</param>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.FileStorage.Store(System.String,System.Byte[])">
            <summary>
                Save or update
            </summary>
            <param name="id">Report id</param>
            <param name="item">Serialized item</param>
            <exception cref="T:System.ArgumentNullException">
                id
                or
                item
            </exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.FileStorage.Load(System.String)">
            <summary>
                Get item
            </summary>
            <param name="id">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>).</param>
            <returns>
                Item
            </returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
            <exception cref="T:System.InvalidOperationException">Did not find the report.</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.FileStorage.TryGetFirstItem(System.String@,System.Byte[]@)">
            <summary>
                Get first item
            </summary>
            <param name="id">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>).</param>
            <param name="contents">Serialized report.</param>
            <returns>
                Item if any; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.FileStorage.Delete(System.String)">
            <summary>
                Delete report from the storage
            </summary>
            <param name="reportId">Report identification (<see cref="P:OneTrueError.Reporting.Contracts.ErrorReportDTO.ReportId"/>)</param>
            <exception cref="T:System.ArgumentNullException">reportId</exception>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.Implementations.TempDirectoryStorageFactory">
            <summary>
                Stores all data in the operating systems TEMP directory which typically means <c><![CDATA[C:\Windows\Temp\<SomeTempDir>\OneTrueError]]></c>
            </summary>
            <remarks>
            The storage factory is created by invoking <c>TempDirectoryStorageFactory.Create()</c>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.TempDirectoryStorageFactory.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Storage.Implementations.AppDataStorageFactory"/> class.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.TempDirectoryStorageFactory.Open(System.String)">
            <summary>
            Open the storage
            </summary>
            <param name="name">Name, like a folder name</param>
            <returns>
            Storage
            </returns>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.Implementations.TempDirectoryStorageFactory.Create">
            <summary>
            Create a new factory.
            </summary>
            <returns>Created factory</returns>
        </member>
        <member name="T:OneTrueError.Reporting.IncludeNonPublicMembersContractResolver">
            <summary>
                JSON.NET class which also includes all private fields.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.NamespaceDoc">
            <summary>
                Welcome to the reporting library for OneTrueError. Read below the class list for more information
            </summary>
            <remarks>
                <para>
                    This library is configured by using the <see cref="T:OneTrueError.Reporting.OneTrue"/> class. Read it's documentation for an example.
                </para>
                <para>
                    If you are interested in providing your own context information automatically you should start by reading
                    the <see cref="N:OneTrueError.Reporting.ContextProviders"/> namespace and then add your own provider by using
                    <c>OneTrue.Configuration.AddContextProvider()</c>. 
                </para>
                <para>
            </para>
                <para>
                    To submit the collected errors you need to configure an <see cref="T:OneTrueError.Reporting.Submitters.IErrorSubmitter"/>. You can use our submitter
                    which uploads all reports to onetrueerror.com, it's named <see cref="T:OneTrueError.Reporting.Submitters.ReportToOneTrueError"/>.
            </para><para>
                    You can also submit the error report to your own custom destination (you actually do not have to use
                    our service). A submitter is quite easy to create, just implement the <see cref="T:OneTrueError.Reporting.Submitters.IErrorSubmitter"/>
                    interface and add it using <c>OneTrue.Configuration.AddSubmitter()</c>
                </para>
            </remarks>
            <example>
            <para>Basic configuration</para>
            <code>
            // The appkey and shared key can be found in onetrueeror.com
            OneTrue.Configuration.Credentials("yourAppKey","yourSharedSecret");
            
            // Some of the optional configuration items.
            OneTrue.Configuration.AskUserForDetails = false;
            OneTrue.Configuration.AskUserForPermission = false;
            </code>
            <para>To manually submit a report you have to do the following:</para>
            <code>
            public ActionResult Activate(UserViewModel model)
            {
            	if (!ModelState.IsValid)
            		return View(model);
            		
            	try
            	{
            		var user = _repos.GetUser(model.Id);
            		user.Activate(model.ActicationCode);
            		_repos.Save(user);
            		return RedirectToAction("Welcome");
            	}
            	catch (Exception exception)
            	{
                    // Look, the model is also included as context information
            		OneTrue.Report(exception, model);
                
                    ModelState.AddModelError("", exception.Message);
            	}
            }
            </code>
            </example>
            <seealso cref="T:OneTrueError.Reporting.OneTrue"/>
        </member>
        <member name="T:OneTrueError.Reporting.ConsoleConfigExtensions">
            <summary>
            Allows use to get user information when unhandled exceptions are caught for console applications.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ConsoleConfigExtensions.CatchConsoleExceptions(OneTrueError.Reporting.IConfigurator)">
            <summary>
            Catch console exceptions.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:OneTrueError.Reporting.Reporters.NamespaceDoc">
            <summary>
                Reporters are the classes that detects unhandled exception and put them into the
                OneTrueError pipeline.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ShortGuid">
            <summary>
                Shortens GUIDs using Base64 and convert the result to a URL friendly string.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ShortGuid.Encode(System.Guid)">
            <summary>
                Create a 22-character case-sensitive short GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>Compacted representation of the GUID</returns>
            <exception cref="T:System.ArgumentNullException">guid</exception>
        </member>
        <member name="M:OneTrueError.Reporting.ShortGuid.Decode(System.String)">
            <summary>
                Get a short GUID as a Guid object.
            </summary>
            <param name="shortGuid">The short GUID.</param>
            <returns>Restored GUID</returns>
            <exception cref="T:System.ArgumentNullException">shortGuid</exception>
            <exception cref="T:System.FormatException">Input string was not in a correct format.</exception>
        </member>
        <member name="T:OneTrueError.Reporting.IErrorCallback">
            <summary>
            Can be used to hook into the reporting process.
            </summary>
            <remarks>All callbacks are invoked as soon as a new exception has been reported.</remarks>
        </member>
        <member name="M:OneTrueError.Reporting.IErrorCallback.Trigger(OneTrueError.Reporting.ErrorCallbackContext)">
            <summary>
            Trigger callback
            </summary>
            <param name="context">Exception context information</param>
        </member>
        <member name="T:OneTrueError.Reporting.ReportIdGenerator">
            <summary>
                Used to be able to choose reportId id strategy
            </summary>
            <remarks>
                <para>
                    The reportId id is the string which are used during communication between the end customers and the OneTrue
                    error
                    customers.
                </para>
                <para>
                    The default implementation Base64 encodes a guid (the last "--" is removed from the Base64 string,"/" is
                    replaced with "_" and "+" is replaced with "-".
                </para>
                <para>
                    The ID must be globally unique (or at least within your own application scope).
                </para>
            </remarks>
            <seealso cref="T:OneTrueError.Reporting.ShortGuid"/>
        </member>
        <member name="M:OneTrueError.Reporting.ReportIdGenerator.Assign(System.Func{System.Exception,System.String})">
            <summary>
                Assign a custom ID generator.
            </summary>
            <param name="generator">The generator.</param>
            <exception cref="T:System.ArgumentNullException">generator</exception>
        </member>
        <member name="M:OneTrueError.Reporting.ReportIdGenerator.Generate(System.Exception)">
            <summary>
                Generate a new ID
            </summary>
            <param name="exception">Exception to get an reportId for</param>
            <returns>reportId</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="T:OneTrueError.Reporting.ErrorCallbackContext">
            <summary>
                Used when invoking all <see cref="T:OneTrueError.Reporting.IErrorCallback"/> to determine if the current report may be sent to the
                submitters.
            </summary>
            <seealso cref="N:OneTrueError.Reporting.Submitters"/>
        </member>
        <member name="M:OneTrueError.Reporting.ErrorCallbackContext.#ctor(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.ErrorCallbackContext"/> class.
            </summary>
            <param name="report">The report.</param>
            <exception cref="T:System.ArgumentNullException">report</exception>
        </member>
        <member name="P:OneTrueError.Reporting.ErrorCallbackContext.Report">
            <summary>
                Created report
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.ErrorCallbackContext.CanSubmitReport">
            <summary>
                True if we may submit the report
            </summary>
            <value>Default is true</value>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.DataStorageProvider">
            <summary>
            Singleton used to provide access to the currently used storage strategy.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Storage.DataStorageProvider.Assign(OneTrueError.Reporting.Storage.IDataStorageFactory)">
            <summary>
            Assign a new strategy
            </summary>
            <param name="factory">Factory to use</param>
        </member>
        <member name="P:OneTrueError.Reporting.Storage.DataStorageProvider.Instance">
            <summary>
            Gets currently configured strategy
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.OneTrueErrorHandler">
            <summary>
                Central class which receives all unhandled exceptions
            </summary>
            <remarks>
                This class will coordinate the work. i.e. first collect data using the <see cref="N:OneTrueError.Reporting.ContextProviders"/> that you
                have configured and then use one of the <see cref="M:OneTrueError.Reporting.IConfigurator.AddSubmitter(OneTrueError.Reporting.Submitters.IErrorSubmitter)"/> to get user feedback and finally
                submit the data using one/more of the <see cref="N:OneTrueError.Reporting.Submitters"/>
            </remarks>
            TODO: Fix the docs.
        </member>
        <member name="M:OneTrueError.Reporting.OneTrueErrorHandler.#ctor(OneTrueError.Reporting.ContextProvidersRegistrar)">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.OneTrueErrorHandler"/> class.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrueErrorHandler.Report(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])">
            <summary>
                An exception has been caught.
            </summary>
            <param name="context">Context information about the exception</param>
            <param name="contexts">Additional custom context collections</param>
            <remarks>
            <para>
                The purpose of the context is to allow different exception reporters to provide context information
                without affecting the base operations.
            </para>
            <para>
            You can provide your own custom context collections.
            </para>
            </remarks>
            TODO: Flytta från config till ett nytt interface.
        </member>
        <member name="M:OneTrueError.Reporting.OneTrueErrorHandler.SendReport(System.String,OneTrueError.Reporting.Reporters.UserSuppliedInformation)">
            <summary>
                Send report to all configured submitters.
            </summary>
            <param name="reportId">The report id.</param>
            <param name="information">The information.</param>
            <exception cref="T:System.ArgumentNullException">reportId</exception>
            <seealso cref="N:OneTrueError.Reporting.Submitters"/>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrueErrorHandler.SendReport(OneTrueError.Reporting.Contracts.ErrorReportDTO,OneTrueError.Reporting.Reporters.UserSuppliedInformation)">
            <summary>
                Send report to all configured submitters.
            </summary>
            <param name="report">The report.</param>
            <param name="information">The information.</param>
            <exception cref="T:System.ArgumentNullException">report</exception>
            <seealso cref="N:OneTrueError.Reporting.Submitters"/>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrueErrorHandler.WriteToEventLogIfPossible(System.String,System.Exception)">
            <summary>
                Small helper used to try to write to the event log using the source <c>OneTrueError</c>.
            </summary>
            <param name="errorMessage">Error message</param>
            <param name="exception">Exception that was caught</param>
        </member>
        <member name="P:OneTrueError.Reporting.OneTrueErrorHandler.DataStorageFactory">
            <summary>
                So that different types of reporters can decide which folder to use for storing reports.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Reporters.AppDomainExceptionReporter">
            <summary>
            Catches unhandled exceptions in the current app domain
            </summary>
            <remarks>Can not prevent the exceptions from terminating the application. 
            <para>Should not be used together with <see cref="T:OneTrueError.Reporting.Reporters.ConsoleApplicationReporter"/> since it hooks the same exception.</para></remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Reporters.AppDomainExceptionReporter.Activate">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Reporters.AppDomainExceptionReporter"/> class.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Reporters.ErrorReporterContext">
            <summary>
            Context supplied by error reports
            </summary>
            <remarks>Used to be able to provide app specific context information (for instance HTTP apps can provide the HTTP context)</remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Reporters.IErrorReporterContext">
            <summary>
            contains context information which can be used during collection such as <c>HttpContext</c> (if the exception was thrown during a HTTP request)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Reporters.IErrorReporterContext.Reporter">
            <summary>
            Gets class which is sending the report ( so that we know which part of the system that caught the exception)
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Reporters.IErrorReporterContext.Exception">
            <summary>
            Exception which was caused the error.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Reporters.ErrorReporterContext.#ctor(System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Reporters.ErrorReporterContext"/> class.
            </summary>
            <param name="reporter">The reporter.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:OneTrueError.Reporting.Reporters.ErrorReporterContext.Reporter">
            <summary>
            Gets class which is sending the report
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Reporters.ErrorReporterContext.Exception">
            <summary>
            Gets caught exception
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Reporters.UserSuppliedInformation">
            <summary>
            Information supplied by the user about this error.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Reporters.UserSuppliedInformation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Reporters.UserSuppliedInformation"/> class.
            </summary>
            <param name="description">Description entered by the user. i.e. information about what the user did when the exception was thrown.</param>
            <param name="email">Email address (entered if the user want to get notified when the exception has been fixed).</param>
        </member>
        <member name="P:OneTrueError.Reporting.Reporters.UserSuppliedInformation.EmailAddress">
            <summary>
            Email address if the user wants to receive a notification when the error has been fixed.
            </summary>
        </member>
        <member name="P:OneTrueError.Reporting.Reporters.UserSuppliedInformation.Description">
            <summary>
            Description entered by the user. i.e. information about what the user did when the exception was thrown
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Storage.NamespaceDoc">
            <summary>
                We need to be able to temporarily store information on the local computer. These classes and interfaces are
                responsible of enabling that.
            </summary>
            <remarks>
                <para>
                    All adapters of this library do not have the same permissions or access to the same folders. Hence we need some
                    way to allow each adapter to customize where
                    the data is actually stored. Hence this namespace. The actual strategy is set by using
                    <see cref="T:OneTrueError.Reporting.Storage.DataStorageProvider"/>.
                </para>
                <para>
                    The need to store is because some adapters (like for ASP.NET) require two different steps before the report is
                    complete. (i.e. redirect to an error page and ask the user for more information.
                    We also need to be able to collect several reports before uploading them to the site (to limit the amount of
                    used bandwidth).
                </para>
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.IErrorSubmitter">
            <summary>
                Defines the contract for all classes that will send the error report to a specific destination.
            </summary>
            <seealso cref="T:OneTrueError.Reporting.Submitters.ReportToOneTrueError"/>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.IErrorSubmitter.Submit(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
                Submit report
            </summary>
            <param name="report">Report to submit</param>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.IErrorSubmitter.SendFeedback(OneTrueError.Reporting.Contracts.FeedbackDTO)">
            <summary>
            Send feedback for a previously submitted error report
            </summary>
            <param name="feedback">Feedback to send</param>
        </member>
        <member name="P:OneTrueError.Reporting.Submitters.IErrorSubmitter.Id">
            <summary>
                Id must be considered to be a const and may not changed once returned.
            </summary>
            <remarks>
                <para>Used to store reports on disk until they can be uploaded</para>
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.ISubmitCoordinator">
            <summary>
            Enqueues and hand out work to submitters. Also makes sure that all reports are persisted so that nothing is lost if reports get queued.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ISubmitCoordinator.Submit(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
                Submit a report (will be enqueued in all registered submitters and uploaded as soon as possible).
            </summary>
            <param name="report">The report.</param>
            <exception cref="T:System.ArgumentNullException">report</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ISubmitCoordinator.Add(OneTrueError.Reporting.Submitters.IErrorSubmitter)">
            <summary>
                Add an additional submitter
            </summary>
            <param name="submitter">The submitter.</param>
            <exception cref="T:System.ArgumentNullException">submitter</exception>
        </member>
        <member name="E:OneTrueError.Reporting.Submitters.ISubmitCoordinator.UploadReportFailed">
            <summary>
            Event that fires if sending the report fails
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.NamespaceDoc">
            <summary>
            Submitters are the classes which takes error reports and delivers them to a specific destination. The destination
            itself
            can be anything from an local log file to a web service.
            </summary>
            <remarks>
              <para>
            The OneTrueError reporter is defined as <see cref="T:OneTrueError.Reporting.Submitters.ReportToOneTrueError"/>.
              </para>
              <para>
            This library will enqueue every error report for each submitter and also persist the queue. It that way the library can continue to upload error
            reports to every submitter even if the application crashes.
              </para>
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.ReportToOneTrueError">
            <summary>
                Upload reports to our web site.
            </summary>
            <remarks>
                <para>
                    To use this reporter you have to create an account at http://onetrueerror.com and then register an application
                    to get an application key and a shared secret.
                </para>
                <para>
                    Finally use that information to configure this reporter:
                </para>
                <example>
                    <code>
            OneTrue.Configuration.AddSubmitter(new ReportToOneTrueError("yourAppKey",
                                                                        "yourSharedSecret"));
            OneTrue.Configuration.AskUserForDetails = false;
            </code>
                </example>
                <para>
                    This reporter will detect if there is no internet connection and wait until there is one and then upload all
                    temporarily stored reports.
                </para>
                <para>
                    This reporter will temporarily store all reports locally and then upload them in a queued manner. In that way
                    no reports are lost if the application crashes.
                </para>
                <para>
                    If your clients are behind a company proxy you'll have to configure your application to use the default proxy
                    with credentials (works even if there is no proxy). Add the configuration below to your app.config (or
                    web.config)
                    <example>
                        <code>
                        <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
              <system.net>
                <defaultProxy useDefaultCredentials="true" />
              </system.net>
            </configuration>
            ]]>
            </code>
                    </example>
                </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ReportToOneTrueError.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Submitters.ReportToOneTrueError"/> class.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="sharedSecret">The shared secret.</param>
            <exception cref="T:System.ArgumentNullException">apiKey</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ReportToOneTrueError.Submit(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
                Upload the report to the web service.
            </summary>
            <param name="report">Report to submit</param>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ReportToOneTrueError.CompressErrorReport(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
                Compress an ErrorReport as JSON string
            </summary>
            <param name="errorReport">ErrorReport</param>
            <returns>Compressed JSON representation of the ErrorReport.</returns>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.ReportToOneTrueError.DeflateErrorReport(System.Byte[])">
            <summary>
                Deflate a compressed error report in JSON format
            </summary>
            <param name="errorReport">Compressed JSON errorReport</param>
            <returns>JSON string decompressed</returns>
        </member>
        <member name="P:OneTrueError.Reporting.Submitters.ReportToOneTrueError.RemoteHost">
            <summary>
                IP Address to upload to.
            </summary>
            <remarks>Not set = upload to <c>http://report.onetrueerror.com/</c></remarks>
            <example>
                http://yourhost.com/reporting/
            </example>
        </member>
        <member name="P:OneTrueError.Reporting.Submitters.ReportToOneTrueError.Id">
            <summary>
                "ReportToOneTrueError"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProvidersRegistrar">
            <summary>
            Registrar used to configure which kind of context information to provide for each unhandled exception
            </summary>
            <remarks>
            The built in providers can be found in the <see cref="N:OneTrueError.Reporting.ContextProviders"/> namespace.
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProvidersRegistrar.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.ContextProvidersRegistrar"/> class.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProvidersRegistrar.Clear">
            <summary>
            Remove all registered providers.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProvidersRegistrar.Add(OneTrueError.Reporting.ContextProviders.IContextInfoProvider)">
            <summary>
            Add a new provider
            </summary>
            <param name="provider">Provider to add</param>
            <exception cref="T:System.ArgumentNullException">provider</exception>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProvidersRegistrar.GetAddedProviderNames">
            <summary>
            Returns the name of all providers which have been added.
            </summary>
            <returns>String array (or an empty array)</returns>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProvidersRegistrar.Remove(System.String)">
            <summary>
            Remove the provider with the specified name
            </summary>
            <param name="name">The name (can be found using <see cref="M:OneTrueError.Reporting.ContextProvidersRegistrar.GetAddedProviderNames"/>).</param>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProvidersRegistrar.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect context information from all context providers.
            </summary>
            <param name="context">Report context (specialized for the different report adapters, for instance the ASP.NET adapter contains the current <c>HttpContext</c>)</param>
            <returns>
            Collected information
            </returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.DiskDriveProvider">
            <summary>
            Collects information about all disks in the computer. Will be added into a collection called <c>DiskDrives</c>.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.DiskDriveProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.DiskDriveProvider.Name">
            <summary>
            Gets "DiskDrives"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.StartupCommandsProvider">
            <summary>
            Loads information about all applications which start during system startup. Will be added to a collection called <c>StartupCommands</c>.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.StartupCommandsProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.StartupCommandsProvider.Name">
            <summary>
            Gets "StartupCommands"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.SystemDevicesProvider">
            <summary>
            Loads information about all system devices. Will be added to a collection called <c>SystemDevices</c>.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.SystemDevicesProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.SystemDevicesProvider.Name">
            <summary>
            Gets "SystemDevices"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.SystemInfoProvider">
            <summary>
            Collects information about the computer (such as motherboard information). Will be added to a collection called <c>SystemInfo</c>.
            </summary>
            <remarks>
            <para>
            Some fields are filtered out per default, look at the <see cref="F:OneTrueError.Reporting.ContextProviders.SystemInfoProvider.Filter"/> property.
            </para>
            </remarks>
        </member>
        <member name="F:OneTrueError.Reporting.ContextProviders.SystemInfoProvider.Filter">
            <summary>
            Fields which will be excluded.
            </summary>
            <remarks>
            <para>
            Default is <c>"Caption", "DnsHostName", "Domain", "Name", "PrimaryOwnerName", "UserName", "Workgroup"</c>
            </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.SystemInfoProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context"></param>
            <returns>
            Collection
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.SystemInfoProvider.Name">
            <summary>
            Gets "SystemInfo"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Reporters.ConsoleApplicationReporter">
            <summary>
            Reports errors for console applications
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.OperatingSystemProvider">
            <summary>
            Collects information about the operating system like version and service pack info. Will be added to a collection called <c>OperatingSystem</c>.
            </summary>
        </member>
        <member name="F:OneTrueError.Reporting.ContextProviders.OperatingSystemProvider.FilteredFields">
            <summary>
            Fields that will not be included.
            </summary>
            <remarks>
            <para>Default filter is <code> "CSName", "RegisteredUser", "SerialNumber"</code> </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.OperatingSystemProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection. Items with multiple values are joined using <c>";;"</c>
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.OperatingSystemProvider.Name">
            <summary>
            Gets "OperatingSystem"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.ContextProviders.ProcessorProvider">
            <summary>
            Collects information about the CPU. Will be added to a collection called <c>Processor</c>.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.ContextProviders.ProcessorProvider.Collect(OneTrueError.Reporting.Reporters.IErrorReporterContext)">
            <summary>
            Collect information
            </summary>
            <param name="context">Context information provided by the class which reported the error.</param>
            <returns>
            Collection
            </returns>
        </member>
        <member name="P:OneTrueError.Reporting.ContextProviders.ProcessorProvider.Name">
            <summary>
            Gets "Processor"
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.OneTrue">
            <summary>
                Configures the framework.
            </summary>
            <remarks>
                You typically configure the library like below, but then you also have to catch the exceptions. You can either do
                it manually (and then call <see cref="M:OneTrueError.Reporting.OneTrue.CreateReport(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])"/>)
                or by using one of the <see cref="N:OneTrueError.Reporting.Reporters"/>. Do note that there are several separate integration packages which
                automatically configures ASP.NET, WCF etc.
            </remarks>
            <example>
                <code>
            OneTrue.Configuration.AskUserForPermission = true;
            OneTrue.Configuration.AddSubmitter(new OneTrueService("MyApiKey", "MySharedSecret"));
            </code>
            </example>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrue.CreateReport(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])">
            <summary>
                Create a new error report
            </summary>
            <param name="context">Context information which can be used when collecting additional information</param>
            <param name="customContextInfo">
                Custom context information. You can for instance supply the invalid domain entity or
                view model. Only simple objects are supported (i.e. one level deep)
            </param>
            <returns>Report identity</returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
            <remarks>
                <para>
                    The report is temporarily stored on the disk until the <c>SendReport()</c> method has been invoked.
                </para>
                <para>
                    All library exceptions are directed to the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions
                </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrue.SendReport(System.String)">
            <summary>
                Send the error report to all configured submitters.
            </summary>
            <param name="reportId">
                The report id (which was returned from <see cref="M:OneTrueError.Reporting.OneTrue.CreateReport(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])"/>).
            </param>
            <remarks>
                <para>
                    All library exceptions are directed to the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions
                </para>
            </remarks>
            <seealso cref="M:OneTrueError.Reporting.IConfigurator.AddSubmitter(OneTrueError.Reporting.Submitters.IErrorSubmitter)"/>
            <seealso cref="N:OneTrueError.Reporting.Submitters"/>
            <exception cref="T:System.ArgumentNullException">reportId</exception>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrue.Report(System.Exception)">
            <summary>
                Report an error directly
            </summary>
            <param name="exception">Exception that you want to get reported</param>
            <returns>Unique identifier for this report (generated using <see cref="T:OneTrueError.Reporting.ReportIdGenerator"/>)</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
            <remarks>
                <para>
                    A lot if context information is also included in the error report. You can configure the attached information
                    by
                    using <see cref="M:OneTrueError.Reporting.IConfigurator.AddContextProvider(OneTrueError.Reporting.ContextProviders.IContextInfoProvider)"/>
                </para>
                <para>
                    All library exceptions are directed to the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions
                </para>
            </remarks>
            <example>
                <code>
            public ActionResult Activate(UserViewModel model)
            {
            	if (!ModelState.IsValid)
            		return View(model);
            		
            	try
            	{
            		var user = _repos.GetUser(model.Id);
            		user.Activate(model.ActicationCode);
            		_repos.Save(user);
            		return RedirectToAction("Welcome");
            	}
            	catch (Exception exception)
            	{
            		OneTrueError.Report(exception);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrue.Report(System.Exception,System.Object)">
            <summary>
                Report an exception directly
            </summary>
            <param name="exception">Exception to report</param>
            <param name="customContext">Additional context information. Can for instance be an entity or view model.</param>
            <returns>Unique identifier for this report (generated using <see cref="T:OneTrueError.Reporting.ReportIdGenerator"/>)</returns>
            <remarks>
                <para>
                    All library exceptions are directed to the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions
                </para>
            </remarks>
            <example>
                <code>
            public ActionResult Activate(UserViewModel model)
            {
                if (!ModelState.IsValid)
                    return View(model);
            		
                try
                {
                    var user = _repos.GetUser(model.Id);
                    user.Activate(model.ActivationCode);
                    _repos.Save(user);
                    return RedirectToAction("Welcome");
                }
                catch (Exception exception)
                {
                    // attaching the view model
                    OneTrueError.Report(exception, model);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrue.SendFeedback(System.String,System.String,System.String)">
            <summary>
                Attach feedback to a error report
            </summary>
            <param name="errorId">Id returned from <see cref="M:OneTrueError.Reporting.OneTrue.CreateReport(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])"/> or <see cref="M:OneTrueError.Reporting.OneTrue.Report(System.Exception)"/>.</param>
            <param name="emailAddress">
                User supplied email address (if user would like to receive status updates for this error).
                Optional
            </param>
            <param name="description">A description written by the user of what he did when the error happened. Optional</param>
            <remarks>
                <para>
                    This method can be used to submit feedback after the actual error report have been sent.
                </para>
                <para>
                    All library exceptions are directed to the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions
                </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.OneTrue.SendReport(System.String,OneTrueError.Reporting.Reporters.UserSuppliedInformation)">
            <summary>
                Send the error report to all configured submitters.
            </summary>
            <param name="reportId">
                The report id (which was returned from <see cref="M:OneTrueError.Reporting.OneTrue.CreateReport(OneTrueError.Reporting.Reporters.IErrorReporterContext,OneTrueError.Reporting.Contracts.ContextInfo[])"/>).
            </param>
            <param name="information">
                Additional information supplied by the user like description of what the user did when the
                error occurred.
            </param>
            <remarks>
                <para>
                    All library exceptions are directed to the <c>OneTrue.Configuration.Advanced.UploadReportFailed</c> event.
                    Subscribe on that event if you have trouble with reporting exceptions
                </para>
            </remarks>
            <seealso cref="M:OneTrueError.Reporting.IConfigurator.AddSubmitter(OneTrueError.Reporting.Submitters.IErrorSubmitter)"/>
            <seealso cref="N:OneTrueError.Reporting.Submitters"/>
        </member>
        <member name="P:OneTrueError.Reporting.OneTrue.Configuration">
            <summary>
                Used to configure on true error. Visit it's documentation for more information about all options.
            </summary>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.SubmitCoordinator">
            <summary>
                Responsible of making sure that all submitters have delivered the reports.
            </summary>
            <remarks>
            <para>
            To guarantee that errors are uploaded despite of unhandled exceptions or bad internet connection we'll
            enqueue all reports and upload them in order. This typically means that we store them on disk as JSON.
            </para>
            <para>
            The disk location depends on the type of application. For ASP.NET we try to create a folder under 
            App_Data while for other applications we use the roaming profile folder.
            </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.SubmitCoordinator.#ctor(OneTrueError.Reporting.Storage.IDataStorageFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Submitters.SubmitCoordinator"/> class.
            </summary>
            <param name="dataStorageFactory">The data storage factory.</param>
            <exception cref="T:System.ArgumentNullException">dataStorageFactory</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.SubmitCoordinator.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting un-managed resources.
            </summary>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.SubmitCoordinator.Submit(OneTrueError.Reporting.Contracts.ErrorReportDTO)">
            <summary>
                Submit a report (will be enqueued in all registered submitters and uploaded as soon as possible).
            </summary>
            <param name="report">The report.</param>
            <exception cref="T:System.ArgumentNullException">report</exception>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.SubmitCoordinator.Add(OneTrueError.Reporting.Submitters.IErrorSubmitter)">
            <summary>
                Add an additional submitter
            </summary>
            <param name="submitter">The submitter.</param>
            <exception cref="T:System.ArgumentNullException">submitter</exception>
        </member>
        <member name="P:OneTrueError.Reporting.Submitters.SubmitCoordinator.UploadDirectly">
            <summary>
            Reports should be uploaded directly and not queued.
            </summary>
            <remarks>
            <para>
            Uploads that fails will result in that reports are thrown away.
            </para>
            <para>This setting MUST be configured before any submitters are added. i.e. before the credentials command.</para>
            </remarks>
        </member>
        <member name="T:OneTrueError.Reporting.Submitters.SubmitterQueue">
            <summary>
            Makes sure that all error reports are persisted for every submitter so that that every submitter can upload all reports no matter if the application dies or not.
            </summary>
            <remarks>
            <para>
            The queue will automatically try to upload reports again if the application fails.
            </para>
            </remarks>
        </member>
        <member name="M:OneTrueError.Reporting.Submitters.SubmitterQueue.#ctor(OneTrueError.Reporting.Submitters.IErrorSubmitter,System.Lazy{OneTrueError.Reporting.Storage.IDataStorage},System.Lazy{OneTrueError.Reporting.Storage.IDataStorage})">
            <summary>
            Initializes a new instance of the <see cref="T:OneTrueError.Reporting.Submitters.SubmitterQueue"/> class.
            </summary>
            <param name="submitter">The submitter that the queue is for.</param>
            <param name="storage">The storage.</param>
            <param name="feedbackStorage"></param>
            <exception cref="T:System.ArgumentNullException">
            submitter
            or
            storage
            </exception>
        </member>
    </members>
</doc>
